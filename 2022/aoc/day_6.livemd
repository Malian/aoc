# Advent of Code - Day 06

```elixir
Mix.install([
  {:kino_aoc, git: "https://github.com/ljgago/kino_aoc"}
])
```

## Advent of Code Helper

<!-- livebook:{"attrs":{"day":"6","session_secret":"SESSION_ID","variable":"puzzle_input","year":"2022"},"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} = KinoAOC.download_puzzle("2022", "6", System.fetch_env!("LB_SESSION_ID"))
```

<!-- livebook:{"branch_parent_index":0} -->

## Part One

-> Description Part One

<!-- livebook:{"break_markdown":true} -->

### Code

```elixir
defmodule PartOne do
  def resolve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    [a, b, c, d | rest] =
      input
      |> String.trim()
      |> String.to_charlist()

    Enum.chunk_while(
      rest,
      [a, b, c, d],
      fn
        value, [a, a, _, _] = acc -> {:cont, acc, Enum.drop(acc, 1) ++ [value]}
        value, [a, _, a, _] = acc -> {:cont, acc, Enum.drop(acc, 1) ++ [value]}
        value, [a, _, _, a] = acc -> {:cont, acc, Enum.drop(acc, 1) ++ [value]}
        value, [_, b, b, _] = acc -> {:cont, acc, Enum.drop(acc, 1) ++ [value]}
        value, [_, b, _, b] = acc -> {:cont, acc, Enum.drop(acc, 1) ++ [value]}
        value, [_, _, c, c] = acc -> {:cont, acc, Enum.drop(acc, 1) ++ [value]}
        _value, acc -> {:cont, acc}
      end,
      fn _acc -> {:cont, []} end
    )
    |> length()
    |> then(&(&1 + 4))
  end
end
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  test "part one" do
    result = run("mjqjpqmgbljsphdztnvjfqwrcgsmlb")
    assert result == 7

    result = run("bvwbjplbgvbhsrlpgdmjqwftvncz")
    assert result == 5

    result = run("nppdvjthqldpwncqszvftbrmjlhg")
    assert result == 6

    result = run("nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg")
    assert result == 10

    result = run("zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw")
    assert result == 11
  end
end

ExUnit.run()
```

### Solution

```elixir
PartOne.resolve(puzzle_input)
```

---

<!-- livebook:{"branch_parent_index":0} -->

## Part Two

-> Description Part Two

<!-- livebook:{"break_markdown":true} -->

### Code

```elixir
defmodule PartTwo do
  def resolve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  @chunk_every 14

  def run(input) do
    input
    |> String.trim()
    |> String.to_charlist()
    |> Enum.chunk_every(@chunk_every, 1)
    |> Enum.map(&Enum.to_list/1)
    |> Enum.take_while(&(Enum.uniq(&1) != &1))
    |> length()
    |> then(&(&1 + @chunk_every))
  end
end
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  test "part two" do
    result = run("mjqjpqmgbljsphdztnvjfqwrcgsmlb")
    assert result == 19
  end
end

ExUnit.run()
```

### Solution

```elixir
PartTwo.resolve(puzzle_input)
```
