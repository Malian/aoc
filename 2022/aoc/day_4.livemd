# Advent of Code - Day 04

```elixir
Mix.install([
  {:kino_aoc, git: "https://github.com/ljgago/kino_aoc"}
])
```

## Advent of Code Helper

<!-- livebook:{"attrs":{"day":"4","session_secret":"SESSION_ID","variable":"puzzle_input","year":"2022"},"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} = KinoAOC.download_puzzle("2022", "4", System.fetch_env!("LB_SESSION_ID"))
```

<!-- livebook:{"branch_parent_index":0} -->

## Part One

-> Description Part One

<!-- livebook:{"break_markdown":true} -->

### Code

```elixir
defmodule PartOne do
  def resolve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      [range1, range2] =
        line
        |> String.split(",", trim: true)
        |> Enum.map(&String.split(&1, "-", trim: true))
        |> Enum.map(fn [start, stop] -> String.to_integer(start)..String.to_integer(stop) end)
        |> Enum.map(&MapSet.new/1)

      MapSet.subset?(range1, range2) or MapSet.subset?(range2, range1)
    end)
    |> Enum.filter(& &1)
    |> Enum.count()
  end
end
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  test "part one" do
    input = """
    2-4,6-8
    2-3,4-5
    5-7,7-9
    2-8,3-7
    6-6,4-6
    2-6,4-8
    """

    result = run(input)
    assert result == 2
  end
end

ExUnit.run()
```

### Solution

```elixir
PartOne.resolve(puzzle_input)
```

---

<!-- livebook:{"branch_parent_index":0} -->

## Part Two

-> Description Part Two

<!-- livebook:{"break_markdown":true} -->

### Code

```elixir
defmodule PartTwo do
  def resolve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn line ->
      [range1, range2] =
        line
        |> String.split(",", trim: true)
        |> Enum.map(&String.split(&1, "-", trim: true))
        |> Enum.map(fn [start, stop] -> String.to_integer(start)..String.to_integer(stop) end)
        |> Enum.map(&MapSet.new/1)

      MapSet.intersection(range1, range2)
    end)
    |> Enum.filter(&(MapSet.size(&1) != 0))
    |> Enum.count()
  end
end
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  test "part two" do
    input = """
    2-4,6-8
    2-3,4-5
    5-7,7-9
    2-8,3-7
    6-6,4-6
    2-6,4-8
    """

    result = run(input)
    assert result == 4
  end
end

ExUnit.run()
```

### Solution

```elixir
PartTwo.resolve(puzzle_input)
```
